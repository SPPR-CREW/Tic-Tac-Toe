@page "/"
@using BlazorGames.Models.TicTacToe
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToe.Shared.Data
@using TicTacToe.Client.Models.Enums;
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime;

<PageTitle>Home</PageTitle>

<div>
    <h1>@(responseMessage)</h1>
</div>

<section>
    <div class="register-form" hidden="@(!showRegisterForm)">
        <label>
            Room number:
            <input @bind="roomNumber" />
        </label>
        <label>
            Password:
            <input type="password" @bind="password" />
        </label>
        <label>
            Username:
            <input @bind="username" />
        </label>
        <button @onclick="Register" hidden="@(!IsConnected)">Register</button>
    </div>
</section>

<hr>

<section>
    <div class="create-room-form" hidden="@(!showCreateRoomForm)">
        <label>
            Password:
            <input type="password" @bind="password" />
        </label>
        <label>
            Username:
            <input @bind="username" />
        </label>
        <button @onclick="CreateRoom" hidden="@(!IsConnected)">Create room</button>
    </div>
</section>

<div hidden="@(!showRoomCredentials)">
    <h2>RoomId: @(roomNumber)</h2>
    <h2>Password: @(password)</h2>
</div>

<div hidden="@(!showUsername)">
    <h2>Your username: @(username)</h2>
</div>

<section>
    <div class="winner-label" hidden="@(!showWinner)">This game was won by @(winnerName)</div>
</section>

<div hidden="@(!IsInGame)">
    <h2>TABLE FOR GAME HERE</h2>

    @for (int i = 0; i < 10; i++)
    {
        @for (int j = 0; j < 10; j++)
        {
            int k = i;
            int m = j;
            <button style="margin: 5px;" @onclick="@(() => TapButton(k, m))">@(dashboard[i][j])</button>
        }
        <br>
    }
</div>

<hr>



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? roomNumber;
    private string? password;
    private string? username;
    private string? responseMessage;
    private List<List<String>> dashboard = new List<List<string>>();
    private string? sign;
    private bool myOrder = false;
    private bool showRegisterForm = true;
    private bool showCreateRoomForm = true;
    private bool showRoomCredentials = false;
    private bool showUsername = false;
    private bool showWinner = false;
    private string winnerName = "";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ttt"))
            .Build();

        hubConnection.On<Response>("RegisterCallback", (response) =>
        {
            if (response.Success is true)
            {
                IsFailed = false;
                IsInGame = true;
                roomNumber = response.RoomNumber;
                showRegisterForm = false;
                showCreateRoomForm = false;
                showUsername = true;
                showRoomCredentials = true;
            }
            else
            {
                IsInGame = false;
                IsFailed = true;
                showRegisterForm = true;
                showCreateRoomForm = true;
                showUsername = false;
                showRoomCredentials = false;
            }
            responseMessage = response.Message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Response>("CreateRoomCallback", (response) =>
        {
            if (response.Success is true)
            {
                IsFailed = false;
                this.roomNumber = response.RoomNumber;
                showRegisterForm = false;
                showCreateRoomForm = false;
                showUsername = true;
                showRoomCredentials = true;
            }
            else
            {
                IsFailed = true;
                showRegisterForm = true;
                showCreateRoomForm = true;
                showUsername = false;
                showRoomCredentials = false;
            }
            IsInGame = false;
            responseMessage = response.Message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Response>("DisconnectCallback", (response) =>
       {
           if (response.Success is true)
           {
               IsFailed = false;
               IsInGame = true;
               this.roomNumber = response.RoomNumber;
               showRegisterForm = true;
               showCreateRoomForm = true;
               showUsername = false;
               showRoomCredentials = false;
           }
           else
           {
               IsInGame = false;
               IsFailed = true;
               showRegisterForm = false;
               showCreateRoomForm = false;
               showUsername = true;
               showRoomCredentials = true;
           }
           responseMessage = response.Message + "Copy the room number and password. Send them to your friend";
           InvokeAsync(StateHasChanged);
       });


        hubConnection.On<SignResponse>("UpdateSign", (response) =>
        {
            this.sign = response.Sign;
            if (this.sign == "X")
            {
                this.myOrder = true;
                this.responseMessage = $"It is your step";
            }
            responseMessage = $"Your sign is {response.Sign}";
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, int>("TapCallback", this.TapCallback);
        for (int i = 0; i < 10; i++)
        {
            var arr = new List<String>();
            for (int j = 0; j < 10; j++)
            {
                arr.Add("_");
            }
            this.dashboard.Add(arr);
        }
        hubConnection.On<WinnerResponse>("WinnerCallback", (response) =>
        {
            this.showWinner = true;
            this.winnerName = response.winnerName == null ? "" : response.winnerName;
            this.IsInGame = false;
            this.showUsername = false;
            this.showRoomCredentials = false;
            this.showCreateRoomForm = true;
            this.showRegisterForm = true;
            this.username = "";
            this.ResetDashboard();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task CreateRoom()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateRoom", password, username);
            this.username = username;
        }
    }

    private async Task Register()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Register", roomNumber, password, username);
            // todo update IsFailed to false
            this.username = username;
        }
    }
    private void ResetDashboard()
    {
        this.dashboard = new List<List<string>>();
        for (int i = 0; i < 10; i++)
        {
            var arr = new List<string>();
            for (int j = 0; j < 10; j++)
            {
                arr.Add("_");
            }
            this.dashboard.Add(arr);
        }
    }

    private async Task TapCallback(int i, int j)
    {
        this.myOrder = true;
        this.responseMessage = "It's time for your step.";
        this.dashboard[i][j] = this.sign == "O" ? "X" : "O";
        await InvokeAsync(StateHasChanged);
    }

    private async Task TapButton(int i, int j)
    {
        Console.WriteLine($"{i} {j} {this.dashboard.Count}");
        string value = this.dashboard[i][j];
        if (this.myOrder)
        {
            Console.WriteLine("Inside my order branch");
            if (value == "_")
            {
                Console.WriteLine("Inside _ branch");
                this.dashboard[i][j] = this.sign;
                this.myOrder = false;
                var state = this.CheckGameState();
                Console.WriteLine("After game check state");
                if (state != GameState.in_process)
                {
                    Console.WriteLine("Inside send async caller.");
                    await hubConnection.SendAsync("WinnerEndpoint", state, this.roomNumber);
                }
                Console.WriteLine("before tap button call");
                await hubConnection.SendAsync("TapButton", roomNumber, i, j);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                this.responseMessage = $"Can't tap here. {this.username}, try again";
            }  
        }
        else
        {
            this.responseMessage = $"It's not your order to step";   
        }

    }

    public GameState CheckGameState()
    {
        var winnerX = new List<string>{ "O","O","O","O","O"};
        var winnerO = new List<string> { "X", "X", "X", "X", "X" };
        Console.WriteLine("Horizontal");
        // check horizontal
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                var arr = this.dashboard[i].Skip(j).Take(5).ToList();
                foreach (var item in arr)
                {
                    Console.Write(item + " ");    
                }
                Console.Write("\n");
                if (arr == winnerX)
                {
                    return GameState.firstWin;
                }
                else if (arr == winnerO)
                {
                    return GameState.secondWin;    
                }

            }
        }
        Console.WriteLine("Vertical");
        // check vertical
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                var arr = new List<string> { this.dashboard[j][i], this.dashboard[j][i + 1], this.dashboard[j][i + 2], this.dashboard[j][i + 3], this.dashboard[j][i + 4] };
                foreach (var item in arr)
                {
                    Console.Write(item + " ");
                }
                Console.Write("\n");
                if (arr == winnerX)
                {
                    return GameState.firstWin;
                }
                else if (arr == winnerO)
                {
                    return GameState.secondWin;
                }

            }
        }
        // check left to right diagonal
        // check right to left diagonal
        return GameState.in_process;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public bool IsInGame { get; set; }
    public bool IsFailed { get; set; }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}